//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/PrefabsSingyu/VRInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @VRInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @VRInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""VRInputActions"",
    ""maps"": [
        {
            ""name"": ""VehicleControls"",
            ""id"": ""32cdbf17-bf26-4bfc-a75c-d53b2676d147"",
            ""actions"": [
                {
                    ""name"": ""DriveForward"",
                    ""type"": ""Button"",
                    ""id"": ""cae51fe1-2567-41e6-a9be-596cd9623d48"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DriveBackward"",
                    ""type"": ""Button"",
                    ""id"": ""018b53c5-7e17-490b-b7a1-4be5739be4a4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Steer"",
                    ""type"": ""Value"",
                    ""id"": ""df6adb37-8729-4191-ac9b-7fcb1f205389"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""25a658d5-1543-4516-8158-731ef3111c6a"",
                    ""path"": ""<XRController>{RightHand}/{GripButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DriveForward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""60b12bf4-801d-4b83-995f-923dde346284"",
                    ""path"": ""<XRController>{LeftHand}/{GripButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DriveBackward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a76cab97-4270-473f-9027-8c5eacf48249"",
                    ""path"": ""<XRController>{LeftHand}/{Primary2DAxis}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Steer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // VehicleControls
        m_VehicleControls = asset.FindActionMap("VehicleControls", throwIfNotFound: true);
        m_VehicleControls_DriveForward = m_VehicleControls.FindAction("DriveForward", throwIfNotFound: true);
        m_VehicleControls_DriveBackward = m_VehicleControls.FindAction("DriveBackward", throwIfNotFound: true);
        m_VehicleControls_Steer = m_VehicleControls.FindAction("Steer", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // VehicleControls
    private readonly InputActionMap m_VehicleControls;
    private List<IVehicleControlsActions> m_VehicleControlsActionsCallbackInterfaces = new List<IVehicleControlsActions>();
    private readonly InputAction m_VehicleControls_DriveForward;
    private readonly InputAction m_VehicleControls_DriveBackward;
    private readonly InputAction m_VehicleControls_Steer;
    public struct VehicleControlsActions
    {
        private @VRInputActions m_Wrapper;
        public VehicleControlsActions(@VRInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @DriveForward => m_Wrapper.m_VehicleControls_DriveForward;
        public InputAction @DriveBackward => m_Wrapper.m_VehicleControls_DriveBackward;
        public InputAction @Steer => m_Wrapper.m_VehicleControls_Steer;
        public InputActionMap Get() { return m_Wrapper.m_VehicleControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(VehicleControlsActions set) { return set.Get(); }
        public void AddCallbacks(IVehicleControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_VehicleControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_VehicleControlsActionsCallbackInterfaces.Add(instance);
            @DriveForward.started += instance.OnDriveForward;
            @DriveForward.performed += instance.OnDriveForward;
            @DriveForward.canceled += instance.OnDriveForward;
            @DriveBackward.started += instance.OnDriveBackward;
            @DriveBackward.performed += instance.OnDriveBackward;
            @DriveBackward.canceled += instance.OnDriveBackward;
            @Steer.started += instance.OnSteer;
            @Steer.performed += instance.OnSteer;
            @Steer.canceled += instance.OnSteer;
        }

        private void UnregisterCallbacks(IVehicleControlsActions instance)
        {
            @DriveForward.started -= instance.OnDriveForward;
            @DriveForward.performed -= instance.OnDriveForward;
            @DriveForward.canceled -= instance.OnDriveForward;
            @DriveBackward.started -= instance.OnDriveBackward;
            @DriveBackward.performed -= instance.OnDriveBackward;
            @DriveBackward.canceled -= instance.OnDriveBackward;
            @Steer.started -= instance.OnSteer;
            @Steer.performed -= instance.OnSteer;
            @Steer.canceled -= instance.OnSteer;
        }

        public void RemoveCallbacks(IVehicleControlsActions instance)
        {
            if (m_Wrapper.m_VehicleControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IVehicleControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_VehicleControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_VehicleControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public VehicleControlsActions @VehicleControls => new VehicleControlsActions(this);
    public interface IVehicleControlsActions
    {
        void OnDriveForward(InputAction.CallbackContext context);
        void OnDriveBackward(InputAction.CallbackContext context);
        void OnSteer(InputAction.CallbackContext context);
    }
}
